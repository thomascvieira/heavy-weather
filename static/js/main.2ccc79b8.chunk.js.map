{"version":3,"sources":["components/Header.js","components/ZipCodeInput.js","components/CurrentWeather.js","components/Button.js","components/Projection.js","components/Forecast.js","components/About.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","toggleInput","locationData","title","className","ZipCodeInput","onAdd","useState","zipCode","setZipCode","zipInput","useRef","useEffect","current","focus","onSubmit","e","preventDefault","zipIsValid","test","alert","ref","type","placeholder","value","onChange","target","CurrentWeather","weatherData","iconClass","weather","id","description","temperature","parseInt","temp","feelsLike","feels_like","Button","text","onClick","Projection","time","icon","rainChance","Forecast","forecastType","data","hourly","slice","map","projection","Intl","DateTimeFormat","hour","hour12","format","dt","pop","daily","weekday","month","day","About","href","rel","to","Footer","App","setLocationData","setToggleInput","setWeatherData","setForecastType","hourlyClassName","dailyClassName","addZipCode","a","fetch","res","json","lat","lon","loc","fetchWeatherData","path","exact","render","props","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ccc79b8.chunk.js","sourcesContent":["const Header = ({ toggleInput, locationData }) => {\r\n  let title = ''\r\n  toggleInput ? title = 'Weather for ' + locationData[0] : title = 'Heavy Weather'\r\n  return (\r\n    <header>\r\n      {/* ternary to change font size if zip is entered */}\r\n      <h1 className={toggleInput ? `header header-weather` : `header`}>{title}</h1>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import { useState, useEffect, useRef } from 'react'\r\n\r\nconst ZipCodeInput = ({ onAdd }) => {\r\n    const [zipCode, setZipCode] = useState('');\r\n\r\n    // set focus to input on pageload\r\n    const zipInput = useRef(null);\r\n    useEffect(() => {\r\n      zipInput.current.focus();\r\n    },[])\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        // checks that input is 5 digits\r\n        const zipValidator = /(\\d){5}/\r\n        const zipIsValid = zipValidator.test(zipCode)\r\n\r\n        // alert thrown if zip is empty or not 5 digits\r\n        if (!zipCode || !zipIsValid) {\r\n            alert('Please enter a valid five digit ZIP code')\r\n            setZipCode('')\r\n            return\r\n        }\r\n\r\n        onAdd(zipCode)\r\n        setZipCode('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form className='zip-form' onSubmit={onSubmit}>\r\n                <input\r\n                    ref={zipInput}\r\n                    type='text'\r\n                    className='zip-input'\r\n                    placeholder=\"Enter ZIP code (ex 90210)\"\r\n                    value={zipCode}\r\n                    onChange={(e) => setZipCode(e.target.value)}>\r\n                </input>\r\n                <input type='submit' value='Submit' className='btn btn-submit'></input>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ZipCodeInput\r\n","const CurrentWeather = ({weatherData}) => {\r\n    if(weatherData[0] !== 0)\r\n    {\r\n        let iconClass = weatherData.current.weather[0].id\r\n        let description = weatherData.current.weather[0].description\r\n        let temperature = parseInt(weatherData.current.temp)\r\n        let feelsLike = parseInt(weatherData.current.feels_like)\r\n        \r\n        return (\r\n            <div className='current-container'>\r\n                <div className=\"current-row row\">\r\n                    <p className='current-temp'>{temperature}°F</p>\r\n                    <i className={`wi wi-owm-${iconClass} current-icon`}></i>   \r\n                </div>\r\n                <div className=\"current-row row\">\r\n                    <p>Feels like {feelsLike}°F</p>\r\n                    <p>{description}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else{\r\n        return (\r\n            <div className='current-container'>\r\n                <h3>Loading...</h3>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CurrentWeather\r\n","const Button = ({text, className, onClick}) => {\r\n    return (\r\n        <button className={className} onClick={onClick}>\r\n            {text}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","const Projection = ({time, temp, icon, description, rainChance}) => {\r\n    return (\r\n        <div className='projection row'>\r\n            <div className='column date'>\r\n                <p>{time}</p>\r\n            </div>\r\n            <div className='column projections'>\r\n                <div className='row projection-data'>\r\n                    <p className='forecast-temp'>{temp}</p>\r\n                    <i className={`wi wi-owm-${icon} projection-icon`}></i>\r\n                    <p className='forecast-desc'>{description}</p>\r\n                    {rainChance !== '0%' && <p className='rain-chance'><i className='wi wi-raindrops rain-chance-icon'></i>{rainChance}</p> }\r\n                </div>\r\n            </div>\r\n\r\n           {/* if chance of rain */}\r\n \r\n        </div>\r\n\r\n        \r\n    )\r\n}\r\n\r\nexport default Projection\r\n","import Projection from \"./Projection\"\r\nconst Forecast = ({ weatherData, forecastType }) => {\r\n    // checks for API response\r\n    if (weatherData[0] !== 0) {\r\n\r\n        if (forecastType === 'hourly') {\r\n            let data = weatherData.hourly\r\n            return (\r\n                <>\r\n                    {data.slice(0,9).map((projection) =>\r\n                    (<Projection\r\n                        key={projection.dt}\r\n                        time={Intl.DateTimeFormat('en-US', { hour: 'numeric', hour12: 'true' }).format(projection.dt * 1000)}\r\n                        temp={parseInt(projection.temp)+'°F'}\r\n                        icon={projection.weather[0].id}\r\n                        description={projection.weather[0].description}\r\n                        rainChance={(projection.pop*100)+'%'}\r\n                    />)\r\n                    )}\r\n                </>\r\n            )\r\n        }\r\n        if (forecastType === 'daily') {\r\n            let data = weatherData.daily\r\n            return (\r\n                <>\r\n                    {data.map((projection) => \r\n                    (<Projection \r\n                        key={projection.dt} \r\n                        time={Intl.DateTimeFormat('en-US', { weekday: 'short', month: 'numeric', day: 'numeric'}).format(projection.dt * 1000)} \r\n                        temp={parseInt(projection.temp.day)+'°F'}\r\n                        icon={projection.weather[0].id}\r\n                        description={projection.weather[0].description}\r\n                        rainChance={(projection.pop*100)+'%'}\r\n                    />)\r\n                    )}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n    // while waiting for API response \r\n    else {\r\n        return (\r\n            <>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Forecast\r\n","import { Link } from 'react-router-dom'\r\nconst About = () => {\r\n    return (\r\n        <div className='about-content'>\r\n            <h2>Resources</h2>\r\n            <ul>\r\n                <li>Location data: <a href=\"https://zippopotam.us/\" target=\"_blank\" rel=\"noreferrer\">Zippopotam.us</a></li>\r\n                <li>Weather data: <a href=\"https://openweathermap.org/api/one-call-api\" target=\"_blank\" rel=\"noreferrer\">OpenWeatherMap's One Call API</a></li>\r\n                <li>Icons: <a href=\"https://erikflowers.github.io/weather-icons/\" target=\"_blank\" rel=\"noreferrer\">Weather Icons</a> by Erik Flowers</li>\r\n                <li>Gradient: <a href=\"https://cssgradient.io/\" target=\"_blank\" rel=\"noreferrer\">cssgradient.io</a></li>\r\n                <li>Design inspiration: <a href=\"https://open.spotify.com/album/2M9F2yYsUvqiBPwUGeNvn1\" target=\"_blank\" rel=\"noreferrer\">Weather Report's <em>Heavy Weather</em></a></li>\r\n            </ul>\r\n            <h2>My Work</h2>\r\n            <ul>\r\n                <li>Portfolio: <a href=\"https://thomascvieira.com/\" target=\"_blank\" rel=\"noreferrer\">thomascvieira.com</a></li>\r\n                <li>LinkedIn: <a href=\"https://www.linkedin.com/in/thomascvieira/\" target=\"_blank\" rel=\"noreferrer\">thomascvieira</a></li>\r\n            </ul>    \r\n            <Link to='/'>Go Back</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import { Link } from 'react-router-dom'\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n           <Link to='/about'><p>Created by <b>Thomas Vieira</b> / List of <b>Resources</b></p></Link>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import { useState } from 'react'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport Header from \"./components/Header\";\r\nimport ZipCodeInput from \"./components/ZipCodeInput\";\r\nimport CurrentWeather from './components/CurrentWeather';\r\nimport Button from './components/Button';\r\nimport Forecast from './components/Forecast';\r\nimport About from './components/About';\r\nimport Footer from './components/Footer';\r\n\r\nconst App = () => {\r\n  const [locationData, setLocationData] = useState([])\r\n  const [toggleInput, setToggleInput] = useState(false)\r\n  const [weatherData, setWeatherData] = useState([0])\r\n  const [forecastType, setForecastType] = useState('hourly')\r\n\r\n  // used for underlining selected forecast\r\n  let hourlyClassName = 'btn btn-forecast'\r\n  let dailyClassName = 'btn btn-forecast'\r\n  forecastType === 'hourly' ? hourlyClassName = 'btn btn-forecast btn-forecast-selected' : hourlyClassName = 'btn btn-forecast'\r\n  forecastType === 'daily' ? dailyClassName = 'btn btn-forecast btn-forecast-selected' : dailyClassName = 'btn btn-forecast'\r\n\r\n  const addZipCode = async (zipCode) => {\r\n    // error handling if 5 digit ZIP is invalid\r\n    try {\r\n      const res = await fetch('https://api.zippopotam.us/us/' + zipCode)\r\n      const data = await res.json()\r\n\r\n      setToggleInput(true)\r\n\r\n      const lat = (data[\"places\"][\"0\"][\"latitude\"])\r\n      const lon = (data[\"places\"][\"0\"][\"longitude\"])\r\n      const loc = (data[\"places\"][\"0\"][\"place name\"])\r\n\r\n      setLocationData([loc, lat, lon])\r\n\r\n      fetchWeatherData(lat, lon)\r\n    } catch (e) {\r\n      alert('Please enter a valid five digit ZIP code')\r\n      setToggleInput(false)\r\n      return\r\n    }\r\n  }\r\n\r\n  const fetchWeatherData = async (lat, lon) => {\r\n    const res = await fetch('https://api.openweathermap.org/data/2.5/onecall?lat=' + lat + '&lon=' + lon + '&units=imperial&exclude=minutely&appid=d17b50c7549fbabee12361a8f6fd09d9')\r\n    const data = await res.json()\r\n\r\n    setWeatherData(data)\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"background\">\r\n        <div className=\"container\">\r\n          <Header\r\n            toggleInput={toggleInput}\r\n            locationData={locationData}\r\n          />\r\n          <Route path='/' exact render={(props) => (\r\n            <>\r\n              {!toggleInput &&\r\n                <ZipCodeInput\r\n                  onAdd={addZipCode}\r\n                  toggleInput={toggleInput}\r\n                />\r\n              }\r\n              {toggleInput &&\r\n                <>\r\n                  <CurrentWeather weatherData={weatherData} />\r\n                  <div>\r\n                    <Button className={hourlyClassName} onClick={() => setForecastType('hourly')} text={'Hourly'} />\r\n                    <Button className={dailyClassName} onClick={() => setForecastType('daily')} text={'Daily'} />\r\n                  </div>\r\n                  <Forecast weatherData={weatherData} forecastType={forecastType} />\r\n                  <Button className={'btn btn-new-zip'} onClick={() => setToggleInput(false)} text={'Enter new ZIP'} />\r\n                </>\r\n              }\r\n              <Footer />\r\n            </>\r\n          )}\r\n          />\r\n          <Route path='/about' component={About} />\r\n          \r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport './css/weather-icons.css'\r\nimport './css/weather-icons.min.css'\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter as Router} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router >\r\n      <App />\r\n    </Router >\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}